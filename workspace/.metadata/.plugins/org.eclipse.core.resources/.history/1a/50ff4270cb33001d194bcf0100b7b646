import weka.attributeSelection.AttributeSelection;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.Ranker;
import weka.classifiers.Classifier;
import weka.classifiers.evaluation.Evaluation;
import weka.classifiers.trees.J48;
import weka.core.Debug.Random;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Utils;
import weka.core.converters.ConverterUtils.DataSource;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;

public class ClassificationIris {

	public static void main(String[] args) throws Exception {
		DataSource source = new DataSource("C:\\MachineLearning\\workspace\\Homework\\src\\main\\webapp\\data\\iris.arff");
		Instances data = source.getDataSet();
		System.out.println(data.numInstances()+"instances loaded.");
//		System.out.println(data.toString()); // 印出 dataset
		
		// Feature selection		
		AttributeSelection attSelect = new AttributeSelection();
		InfoGainAttributeEval eval = new InfoGainAttributeEval(); // 建立評估器
		Ranker search = new Ranker(); // 建立排行器

		attSelect.setEvaluator(eval);
		attSelect.setSearch(search);
		attSelect.SelectAttributes(data);
		int[] indices = attSelect.selectedAttributes();
		System.out.println("Selected attributes: "+Utils.arrayToString(indices));
		
		// Build a decision tree
		String[] options = new String[1];
		options[0] = "-U"; // J48 unpruned tree
		J48 tree = new J48();  // 建立 J48 決策樹演算法物件
		tree.setOptions(options);
		tree.buildClassifier(data); // 執行
		System.out.println(tree); // 顯示結果
		
		//-------------------------------------------------------------------------------
		// Classify new instance : 輸入 Iris 資料 (sepallength, sepalwidth, petallength, petalwidth)
		double[] vals = new double[data.numAttributes()];
		vals[0] = 5.9; // sepallength Numeric
		vals[1] = 3.0; // sepalwidth Numeric
		vals[2] = 5.1; // petallength Numeric
		vals[3] = 1.8; // petalwidth Numeric
		//-------------------------------------------------------------------------------
		
		Instance myIris = new DenseInstance(1.0, vals);
		// Assosiate your instance with Instance object in this case dataRaw
		myIris.setDataset(data);
		
		double label = tree.classifyInstance(myIris);
		System.out.println(data.classAttribute().value((int)label));
		
		// Evaluation
		Classifier cl = new J48();
		Evaluation eval_roc = new Evaluation(data);
		eval_roc.crossValidateModel(cl, data, 10, new Random(1), new Object[] {});
		System.out.println(eval_roc.toSummaryString()); // 顯示評估結果
		// Confusion matrix
		double[][] confusionMatrix = eval_roc.confusionMatrix();
		System.out.println(eval_roc.toMatrixString()); // 顯示混淆矩陣
	}

}
