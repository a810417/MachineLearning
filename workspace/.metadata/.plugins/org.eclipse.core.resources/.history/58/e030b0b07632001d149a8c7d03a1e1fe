import weka.attributeSelection.AttributeSelection;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.Ranker;
import weka.classifiers.Classifier;
import weka.classifiers.evaluation.Evaluation;
import weka.classifiers.trees.J48;
import weka.core.Debug.Random;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Utils;
import weka.core.converters.ConverterUtils.DataSource;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;

public class ClassificationTask {

	public static void main(String[] args) throws Exception {
		DataSource source = new DataSource("data/zoo.arff");
		Instances data = source.getDataSet();
		System.out.println(data.numInstances()+"instances loaded.");
//		System.out.println(data.toString()); // 印出 dataset

		// remove animal attribute
		String[] opts = new String[] {"-R", "1"};
		Remove remove = new Remove();
		remove.setOptions(opts);
		remove.setInputFormat(data);
		data = Filter.useFilter(data, remove);
		
		// Feature selection		
		AttributeSelection attSelect = new AttributeSelection();
		InfoGainAttributeEval eval = new InfoGainAttributeEval(); // 建立評估器
		Ranker search = new Ranker(); // 建立排行器

		attSelect.setEvaluator(eval);
		attSelect.setSearch(search);
		attSelect.SelectAttributes(data);
		int[] indices = attSelect.selectedAttributes();
		System.out.println("Selected attributes: "+Utils.arrayToString(indices));
		
		// Build a decision tree
		String[] options = new String[1];
		options[0] = "-U"; // J48 unpruned tree
		J48 tree = new J48();  // 建立 J48 決策樹演算法物件
		tree.setOptions(options);
		tree.buildClassifier(data); // 執行
		System.out.println(tree); // 顯示結果
		
		// Classify new instance
		double[] vals = new double[data.numAttributes()];
		vals[0] = 1.0; // hair {false, true}
		vals[1] = 0.0; // feathers {false, true}
		vals[2] = 0.0; // eggs {false, true}
		vals[3] = 1.0; // milk {false, true}
		vals[4] = 0.0; // airborne {false, true}
		vals[5] = 0.0; // aquatic{false, true}
		vals[6] = 0.0; // predator{false, true}
		vals[7] = 1.0; // toothed{false, true}
		vals[8] = 1.0; // backbone {false, true}
		vals[9] = 1.0; // breathes {false, true}
		vals[10] = 1.0; // venomous {false, true}
		vals[11] = 0.0; // fins {false, true}
		vals[12] = 4.0; // legs INTEGER [0,9]
		vals[13] = 1.0; // tail {false, true}
		vals[14] = 1.0; // domestic {false, true}
		vals[15] = 0.0; // catsize {false, true}
		
		Instance myUnicorn = new DenseInstance(1.0, vals);
		// Assosiate your instance with Instance object in this case dataRaw
		myUnicorn.setDataset(data);
		
		double label = tree.classifyInstance(myUnicorn);
		System.out.println(data.classAttribute().value((int)label));
		
		// Evaluation
		Classifier cl = new J48();
		Evaluation eval_roc = new Evaluation(data);
		eval_roc.crossValidateModel(cl, data, 10, new Random(1), new Object[] {});
		System.out.println(eval_roc.toSummaryString());
	}

}
